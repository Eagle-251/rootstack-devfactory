job "{{ nomad_openvas_job_name }}" {
  datacenters = ["{{ nomad_datacenter }}"]
  type = "service"

  constraint {
    attribute = "${attr.kernel.name}"
    value     = "linux"
  }

  group "openvas" {
    count = "{{ nomad_openvas_group_count }}"

    volume "openvas_data"{
      type = "{{ nomad_openvas_volume.type }}"
      access_mode     = "{{ nomad_openvas_volume.accessmode }}"
      attachment_mode = "{{ nomad_openvas_volume.attachmentmode }}"     
      read_only = {{ nomad_openvas_volume.read_only }}
      source = "{{ nomad_openvas_volume.id }}"
    }
    volume "openvas_database"{
      type = "{{ nomad_openvas_volume.type }}"
      access_mode     = "{{ nomad_openvas_volume.accessmode }}"
      attachment_mode = "{{ nomad_openvas_volume.attachmentmode }}"     
      read_only = {{ nomad_openvas_volume.read_only }}
      source = "{{ nomad_openvas_volume.id }}"
    }

    network {
      mode = "bridge"
      port "{{ nomad_openvas_network[0].name }}" {
        to = {{ nomad_openvas_network[0].port }}
        host_network = "{{ nomad_openvas_network[0].hostnetwork }}"
      }
      port "{{ nomad_openvas_network[1].name }}" {
        static = {{ nomad_openvas_network[1].port }}
        host_network = "{{ nomad_openvas_network[1].hostnetwork }}"
      }
    }

    service {
      name = "{{ nomad_openvas_services[0].name }}"
      port = "{{ nomad_openvas_services[0].port }}"
      tags = [
        "traefik.enable=true",
        "traefik.http.routers.openvas.tls=true",
        "traefik.http.routers.openvas.entrypoints=https",
        "traefik.http.routers.openvas.tls.certResolver={{ consul_dc_name }}",
        "traefik.http.routers.openvas.tls.domains[0].main=openvas.{{ zone }}",
      ]
    }

    task "create_socket_paths" {
        driver = "docker"
        config {
            image = "{{ nomad_openvas_python_image }}"
            command = "sh"
            args = ["-c", "python local/make_sockets -s redis postgres ospd gvmd -d {{ nomad_openvas_sockets_path }}"
          }
        template {
            data = <<EOH
#!/usr/local/bin/python

import socket as s
import os
import argparse
parser = argparse.ArgumentParser()
parser.add_argument('-s', nargs='+')
parser.add_argument('-d')
args = parser.parse_args()
sockets = args.s
dir = args.d
try:
    os.mkdir(dir)
except FileExistsError:
    print("Directory already exists, skipping...")
finally:
    for addr in sockets:
        sock = s.socket(s.AF_UNIX)
        sock.bind(dir + "/" + addr)
EOH
            destination = "local/make_sockets"
            perms = "744"
        }
        lifecycle {
            hook = "prestart"
            sidecar = false
        } 
    }

    task "redis_server" {
        driver = "docker"
        config {
            image = "{{ nomad_openvas_redis_image }}"
            mount {
                type = "bind"
                target = "{{ nomad_openvas_redis_socket_target }}"
                source = "{{ nomad_openvas_redis_socket_source }}"
                readonly = false
            }
        }
    }

    task "postgres_gvm" {
        driver = "docker"
        env {
            PG_DATA = "{{ nomad_openvas_postgres_data_path }}"
        }
        config {
            image = "{{ nomad_openvas_postgres_image }}"
            mount {
                type = "bind"
                target = "{{ nomad_openvas_postgres_socket_target }}"
                source = "{{ nomad_openvas_postgres_socket_source }}"
                readonly = false
            }
        }
        volume_mount {
            volume = "openvas_database"
            destination = "/data"
        }
    }

    task "gvmd" {
        driver = "docker"
        config {
            image = "{{ nomad_openvas_gvmd_image }}"
            command = "sh"
            args = ["-c", "./local/feed-sync.sh && /usr/local/bin/start-gvmd"]
            mount {
                type = "bind"
                target = "{{ nomad_openvas_gvmd_socket_target }}"
                source = "{{ nomad_openvas_gvmd_socket_source }}"
                readonly = false
              }
            mount {
                type = "bind"
                target = "{{ nomad_openvas_ospd_openvas_socket_target }}"
                source = "{{ nomad_openvas_ospd_openvas_socket_source }}"
                readonly = false
              }
            mount {
                type = "bind"
                target = "{{ nomad_openvas_postgres_socket_target }}"
                source = "{{ nomad_openvas_postgres_socket_source }}"
                readonly = false
              }
        }
        template {
            data = <<EOH
            {{ lookup('ansible.builtin.file', 'feed-sync.sh') }}
            EOH
            destination = "local/feed-sync.sh"
            perms = "744"
        }
        volume_mount {
            volume = "openvas_data"
            destination = "/var/lib"
        }
    }

    task "gsa" {
        driver = "docker"
        config {
          image = "{{ nomad_openvas_gsa_image}}"
          ports = ["http"]
        }
    }
    task "ospd-openvas" {
        driver = "docker"
        config {
            image = "{{ nomad_openvas_ospd_openvas_image }}"
            command = "sh"
            args = [
            "-c", 
            "/usr/local/bin/greenbone-nvt-sync && ospd-openvas --config /etc/gvm/ospd-openvas.conf --mqtt-broker-address localhost --notus-feed-dir /var/lib/notus/advisories -m 666"
            ]
            mount {
                type = "bind"
                target = "{{ nomad_openvas_ospd_openvas_socket_target }}"
                source = "{{ nomad_openvas_ospd_openvas_socket_source }}"
                readonly = false
              }
            mount {
                type = "bind"
                target = "{{ nomad_openvas_redis_socket_target }}"
                source = "{{ nomad_openvas_redis_socket_source }}"
                readonly = false
              }
            #cap_add = ["NET_ADMIN", "NET_RAW"]
            security_opt = ["seccomp=unconfined", "apparmor=unconfined"]
            init = true
        }
        volume_mount {
            volume = "openvas_data"
            destination = "/var/lib"
        }
    }

    task "mqtt_broker" {
        driver = "docker"
        config {
            image = "{{ nomad_openvas_mqtt_broker_image }}"
            ports = ["{{ nomad_openvas_network[1].name }}"] 
          }
    }
    task "notus_scanner" {
        driver = "docker"
        env {
            NOTUS_SCANNER_MQTT_BROKER_ADDRESS = "localhost"
            NOTUS_SCANNER_PRODUCTS_DIRECTORY = "/var/lib/notus/products"
        }
        config { 
            image = "{{ nomad_openvas_notus_scanner_image }}"
        }
        volume_mount {
            volume = "openvas_data"
            destination = "/var/lib"
        }
    }
  }
}
